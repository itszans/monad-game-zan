<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monad Block Blast</title>
    <style>
        body {
            background-color: #2E0047;
            color: #D8BFD8;
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            margin: 0;
            overflow: hidden;
        }
        #game-container {
            background-color: #4B0082;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(138, 43, 226, 0.5);
            position: relative;
        }
        #grid {
            display: grid;
            grid-template-columns: repeat(8, 40px);
            gap: 2px;
            background-color: #6A0DAD;
            padding: 5px;
            border: 2px solid #A100A1;
        }
        .cell {
            width: 40px;
            height: 40px;
            background-color: #D8BFD8;
            border: 1px solid #A100A1;
        }
        .block {
            background-color: #8A2BE2;
            cursor: move;
            display: inline-grid;
            gap: 2px;
        }
        .block-cell {
            width: 40px;
            height: 40px;
            background-color: #8A2BE2;
            border: 1px solid #A100A1;
        }
        .placed {
            background-color: #A100A1;
        }
        #blocks-container {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }
        #login-container, #game-info {
            margin: 20px;
        }
        button {
            background-color: #6A0DAD;
            color: #D8BFD8;
            border: 2px solid #A100A1;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
        }
        button:hover {
            background-color: #A100A1;
        }
        #watermark {
            position: absolute;
            bottom: 10px;
            right: 10px;
            color: #D8BFD8;
            opacity: 0.7;
            font-size: 14px;
            font-family: 'Courier New', Courier, monospace;
            text-shadow: 0 0 5px rgba(138, 43, 226, 0.8);
        }
    </style>
</head>
<body>
    <h1>Monad Block Blast</h1>
    <div id="login-container">
        <input type="text" id="username" placeholder="Masukkan Nama Pengguna">
        <button onclick="login()">Login</button>
    </div>
    <div id="game-container" style="display: none;">
        <div id="game-info">
            <p>Level: <span id="level">1</span> | Skor: <span id="score">0</span> | Target: <span id="target">100</span></p>
        </div>
        <div id="grid"></div>
        <div id="blocks-container"></div>
        <button onclick="startNewGame()">Main Lagi</button>
        <div id="watermark">x @itsmezans23 love monadðŸ©µ</div>
    </div>
    <div id="leaderboard">
        <h2>Leaderboard</h2>
        <p id="high-score">Skor Tertinggi: -</p>
    </div>

    <script>
        let grid = Array(8).fill().map(() => Array(8).fill(0));
        let score = 0;
        let level = 1;
        let targetScore = 100;
        let currentBlocks = [];
        let username = '';

        function login() {
            username = document.getElementById('username').value || 'Guest';
            document.getElementById('login-container').style.display = 'none';
            document.getElementById('game-container').style.display = 'block';
            loadHighScore();
            startNewGame();
        }

        function loadHighScore() {
            const highScore = localStorage.getItem(`highScore_${username}`) || 0;
            document.getElementById('high-score').textContent = `Skor Tertinggi: ${highScore} (${username})`;
        }

        function saveHighScore() {
            const currentHighScore = localStorage.getItem(`highScore_${username}`) || 0;
            if (score > currentHighScore) {
                localStorage.setItem(`highScore_${username}`, score);
                loadHighScore();
            }
        }

        function startNewGame() {
            grid = Array(8).fill().map(() => Array(8).fill(0));
            score = 0;
            level = 1;
            targetScore = 100;
            document.getElementById('score').textContent = score;
            document.getElementById('level').textContent = level;
            document.getElementById('target').textContent = targetScore;
            createGrid();
            generateBlocks();
        }

        function createGrid() {
            const gridElement = document.getElementById('grid');
            gridElement.innerHTML = '';
            for (let i = 0; i < 8; i++) {
                for (let j = 0; j < 8; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    cell.dataset.row = i;
                    cell.dataset.col = j;
                    cell.addEventListener('dragover', (e) => e.preventDefault());
                    cell.addEventListener('drop', handleDrop);
                    gridElement.appendChild(cell);
                }
            }
        }

        function generateBlocks() {
            const blocksContainer = document.getElementById('blocks-container');
            blocksContainer.innerHTML = '';
            currentBlocks = [
                [[1, 1], [1, 1]], // 2x2 square
                [[1, 1, 1]], // 3x1 line
                [[1], [1], [1]] // 1x3 line
            ];
            currentBlocks.forEach((block, index) => {
                const blockElement = document.createElement('div');
                blockElement.className = 'block';
                blockElement.draggable = true;
                blockElement.dataset.blockIndex = index;
                block.forEach(row => {
                    row.forEach(cell => {
                        if (cell) {
                            const blockCell = document.createElement('div');
                            blockCell.className = 'block-cell';
                            blockElement.appendChild(blockCell);
                        }
                    });
                });
                blockElement.style.gridTemplateColumns = `repeat(${block[0].length}, 40px)`;
                blockElement.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('blockIndex', index);
                });
                blocksContainer.appendChild(blockElement);
            });
        }

        function handleDrop(e) {
            e.preventDefault();
            const blockIndex = e.dataTransfer.getData('blockIndex');
            const block = currentBlocks[blockIndex];
            const row = parseInt(e.target.dataset.row);
            const col = parseInt(e.target.dataset.col);

            if (canPlaceBlock(block, row, col)) {
                placeBlock(block, row, col);
                checkLines();
                generateBlocks();
                saveHighScore();
                if (!canPlaceAnyBlock()) {
                    alert(`Game Over! Skor: ${score}`);
                    startNewGame();
                }
                if (score >= targetScore) {
                    level++;
                    targetScore += 100 * level;
                    document.getElementById('level').textContent = level;
                    document.getElementById('target').textContent = targetScore;
                    alert(`Selamat! Anda naik ke Level ${level}!`);
                }
            }
        }

        function canPlaceBlock(block, row, col) {
            for (let i = 0; i < block.length; i++) {
                for (let j = 0; j < block[0].length; j++) {
                    if (block[i][j]) {
                        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j]) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        function placeBlock(block, row, col) {
            for (let i = 0; i < block.length; i++) {
                for (let j = 0; j < block[0].length; j++) {
                    if (block[i][j]) {
                        grid[row + i][col + j] = 1;
                        const cell = document.querySelector(`.cell[data-row="${row + i}"][data-col="${col + j}"]`);
                        cell.classList.add('placed');
                    }
                }
            }
            score += block.flat().filter(x => x).length ** 2 * 10;
            document.getElementById('score').textContent = score;
        }

        function checkLines() {
            let linesCleared = 0;
            for (let i = 0; i < 8; i++) {
                if (grid[i].every(cell => cell)) {
                    grid[i].fill(0);
                    document.querySelectorAll(`.cell[data-row="${i}"]`).forEach(cell => cell.classList.remove('placed'));
                    linesCleared++;
                }
            }
            for (let j = 0; j < 8; j++) {
                if (grid.every(row => row[j])) {
                    for (let i = 0; i < 8; i++) {
                        grid[i][j] = 0;
                        document.querySelector(`.cell[data-row="${i}"][data-col="${j}"]`).classList.remove('placed');
                    }
                    linesCleared++;
                }
            }
            if (linesCleared > 1) {
                alert('Combo! Dapatkan Purple Star power-up!');
            }
        }

        function canPlaceAnyBlock() {
            for (let block of currentBlocks) {
                for (let i = 0; i < 8; i++) {
                    for (let j = 0; j < 8; j++) {
                        if (canPlaceBlock(block, i, j)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
    </script>
</body>
</html>
